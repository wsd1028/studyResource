前端分页：
  private getMapPageData() {
    let mapData = this.mapData;//总数据
    let mapPageData = [];//分页数据
    let pageIndex = this.pageIndex - 1;
    let count = 0;
    for (let i = 0; i < mapData.length; i++) {
      if (mapData[i + pageIndex * this.pageSize]) {
        mapPageData.push(mapData[i + pageIndex * this.pageSize]);
        count++;
      } else {
        break;
      }
      if (count > this.pageSize - 1) {
        break;
      }
    }
    this.mapPageData = mapPageData;
  }




过滤：
 this.updateForm.nodeId = value;
    updateRoomMess = roomMess.filter(item => {
      return item.nodeID == value;
    });


 //过滤数组项的字符串
/*demo*/
 data.xData = this.filterText({
      arr: data.xData,
      key: "",
      ruleArr: ["CQYD-023-", "B42", "B22"]
    });

  private filterText(data) {
    let { arr, key, ruleArr } = data;
    if (key) {
      for (let i = 0; i < arr.length; i++) {
        let item = arr[i];
        let str = item[key];
        let newStr = "";
        for (let j = 0; j < ruleArr.length; j++) {
          newStr = str.split(ruleArr[j]).join("");
          str=newStr;
        }
        arr[i][key] = newStr;
      }
    } else {
      for (let i = 0; i < arr.length; i++) {
        let str = arr[i];
        let newStr = "";
        for (let j = 0; j < ruleArr.length; j++) {
          newStr = str.split(ruleArr[j]).join("");
          str=newStr;
        }
        arr[i] = newStr;
      }
    }
    return arr;
  }

vue监听界面刷新
  async mounted() {
    this.handleSearch(1);
    this.getCustTypes();
    this.getCustManagers();
    window.addEventListener("beforeunload", e => this.beforeunloadHandler(e));
  }
  beforeDestroy() {
    window.removeEventListener("beforeunload", e =>
      this.beforeunloadHandler(e)
    );
  }