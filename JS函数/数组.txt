//数组中多个对象项去重
function singleArrObj(oldArr, rule) {
  let newArr = [];
  for (var i = 0; i < oldArr.length; i++) {
    var flag = true;
    for (var j = 0; j < newArr.length; j++) {
      let oldItem = oldArr[i];
      let newItem = newArr[j];
      if (oldItem[rule] == newItem[rule]) {
        flag = false;
      }
    }
    if (flag) {
      newArr.push(oldArr[i]);
    }
  }
  return newArr;
}


/*
 * @parm array 排序的数组对象
 * @parm key 要根据数组对象的哪条属性排序
 * @parm updown （up 升序 down 降序）
 */
function sortByKey(array, key, updown) {
  return array.sort(function(a, b) {
    var x = a[key];
    var y = b[key];
    if (updown == "up") {
      return x < y ? -1 : x > y ? 1 : 0;
    }
    if (updown == "down") {
      return x < y ? 1 : x > y ? -1 : 0;
    }
  });
}


//过滤：
 this.updateForm.nodeId = value;
    updateRoomMess = roomMess.filter(item => {
      return item.nodeID == value;
    });


 //过滤数组项的字符串
/*demo*/
 data.xData = this.filterText({
      arr: data.xData,
      key: "",
      ruleArr: ["CQYD-023-", "B42", "B22"]
    });

  private filterText(data) {
    let { arr, key, ruleArr } = data;
    if (key) {
      for (let i = 0; i < arr.length; i++) {
        let item = arr[i];
        let str = item[key];
        let newStr = "";
        for (let j = 0; j < ruleArr.length; j++) {
          newStr = str.split(ruleArr[j]).join("");
          str=newStr;
        }
        arr[i][key] = newStr;
      }
    } else {
      for (let i = 0; i < arr.length; i++) {
        let str = arr[i];
        let newStr = "";
        for (let j = 0; j < ruleArr.length; j++) {
          newStr = str.split(ruleArr[j]).join("");
          str=newStr;
        }
        arr[i] = newStr;
      }
    }
    return arr;
  }；

//搜索
function search(data,rule,value){
                    let list=[];
                     list = data.filter(item => {
                    let str=item[rule]+"";
                    if(rule=="fluxIn"||rule=="fluxOut"){
                        str=item[rule].toFixed(2)+"";
                    }
                    return str.includes(value);
                     });
                return list;
                }
